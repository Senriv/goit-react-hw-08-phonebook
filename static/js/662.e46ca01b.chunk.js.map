{"version":3,"file":"static/js/662.e46ca01b.chunk.js","mappings":"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","sources":["components/Phonebook/Form/Form.styled.jsx","components/Phonebook/Form/Form.jsx","components/Phonebook/Notification/Notification.jsx","components/Phonebook/Contact-list/ContactList.styled.jsx","components/Phonebook/Contact-list/ContactList.jsx","components/Phonebook/Filter/Filter.styled.jsx","components/Phonebook/Filter/Filter.jsx","components/Phonebook/Section/Section.styled.jsx","components/Phonebook/Section/Section.jsx","components/Phonebook/Phonebook.styled.jsx","components/Phonebook/Phonebook.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const FormEl = styled.form`\n  display: flex;\n  flex-direction: row;\n  align-items: center;\n`;\n\nexport const FormLable = styled.label`\n  margin-right: 10px;\n`;\n\nexport const FormInput = styled.input`\n  margin-left: 15px;\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n\n  &:focus {\n    outline: none;\n    border-color: #4caf50;\n  }\n`;\n\nexport const FormBtn = styled.button`\n  padding: 10px 20px;\n  background-color: #4caf50;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background-color: #45a049;\n  }\n`;\n","import { useState, useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getContactsThunk, addContactsThunk } from 'redux/contactsAsyncThunk';\nimport { selectContacts } from 'redux/selectors';\nimport { FormEl, FormLable, FormInput, FormBtn } from './Form.styled';\n\nconst Form = () => {\n  const [name, setName] = useState('');\n  const [phone, setPhone] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactsThunk());\n  }, [dispatch]);\n\n  const handleChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'phone':\n        setPhone(value);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const onAddedContact = data => {\n    if (\n      contacts.find(\n        contact => contact.name.toLowerCase() === data.name.toLowerCase()\n      )\n    ) {\n      alert(`${data.name} is already in contacts`);\n      return;\n    }\n    dispatch(addContactsThunk(data));\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const contact = {\n      name,\n      number: phone,\n    };\n    onAddedContact(contact);\n    resetForm();\n  };\n\n  const resetForm = () => {\n    setName('');\n    setPhone('');\n  };\n\n  return (\n    <FormEl onSubmit={handleSubmit}>\n      <FormLable>\n        Name\n        <FormInput\n          type=\"text\"\n          name=\"name\"\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n          required\n          value={name}\n          onChange={handleChange}\n        />\n      </FormLable>\n      <FormLable>\n        Number\n        <FormInput\n          type=\"tel\"\n          name=\"phone\"\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n          required\n          value={phone}\n          onChange={handleChange}\n        />\n      </FormLable>\n      <FormBtn type=\"submit\">Add contact</FormBtn>\n    </FormEl>\n  );\n};\n\nexport default Form;\n","import PropTypes from 'prop-types';\n\nexport const Notification = ({ message = 'There is no contacts' }) => (\n  <h3>{message}</h3>\n);\n\nNotification.propTypes = {\n  message: PropTypes.string.isRequired,\n};\n","import styled from '@emotion/styled';\n\nexport const Contacts = styled.ul`\n  list-style-type: none;\n  padding: 0;\n`;\n\nexport const Contact = styled.li`\n  display: flex;\n  align-items: center;\n  margin-bottom: 10px;\n  padding: 10px;\n  background-color: #f9f9f9;\n  border-radius: 4px;\n\n  &:last-child {\n    margin-bottom: 0;\n  }\n`;\n\nexport const ContactName = styled.p`\n  margin-right: 10px;\n  font-weight: bold;\n`;\n\nexport const ContactBtnDelete = styled.button`\n  margin-left: 15px;\n  padding: 5px 10px;\n  background-color: #f44336;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  transition: background-color 0.3s ease;\n\n  &:hover {\n    background-color: #d32f2f;\n  }\n`;\n","import React from 'react';\nimport { Notification } from '../Notification/Notification';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContactsThunk } from 'redux/contactsAsyncThunk';\nimport { selectVisibleContacts } from 'redux/selectors';\nimport {\n  Contacts,\n  Contact,\n  ContactName,\n  ContactBtnDelete,\n} from './ContactList.styled';\n\nfunction ContactList() {\n  const dispatch = useDispatch();\n  const visibleContacts = useSelector(selectVisibleContacts)\n\n  const onContactRemoving = id => {\n    dispatch(deleteContactsThunk(id));\n  };\n\n  return visibleContacts.length > 0 ? (\n    <Contacts>\n      {visibleContacts.map(contact => (\n        <Contact key={contact.id}>\n          <ContactName>{contact.name}:</ContactName>\n          <p>{contact.number}</p>\n          <ContactBtnDelete onClick={() => onContactRemoving(contact.id)}>\n            Delete\n          </ContactBtnDelete>\n        </Contact>\n      ))}\n    </Contacts>\n  ) : (\n    <Notification message=\"There is no contacts\"></Notification>\n  );\n}\n\nexport default ContactList;\n","import styled from '@emotion/styled';\n\nexport const FilterText = styled.p`\n  margin-bottom: 5px;\n  font-weight: bold;\n`;\n\nexport const FilterInput = styled.input`\n  padding: 10px;\n  border: 1px solid #ccc;\n  border-radius: 4px;\n`;\n","import { setFilter } from 'redux/filterSlice';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { FilterText, FilterInput } from './Filter.styled';\nimport { selectFilter } from 'redux/selectors';\n\nexport const Filter = () => {\n  const value = useSelector(selectFilter);\n  const dispatch = useDispatch();\n  const changeFilter = e => {\n    dispatch(setFilter(e.currentTarget.value));\n  };\n  return (\n    <div>\n      <FilterText>Find contacts by name</FilterText>\n      <FilterInput type=\"text\" value={value} onChange={changeFilter} />\n    </div>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const SectionWrapper = styled.section`\n    margin-bottom: 20px;\n`","import PropTypes from 'prop-types';\nimport { SectionWrapper } from './Section.styled';\n\nexport const Section = ({ title = 'Section title', children }) => (\n  <SectionWrapper>\n    <h2>{title}</h2>\n    {children}\n  </SectionWrapper>\n);\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n  children: PropTypes.node,\n};\n","import styled from '@emotion/styled';\n\nexport const SectionContainer = styled.section`\n  max-width: 800px;\n  margin: 0 auto;\n  padding: 20px;\n`;\n","import Form from './Form/Form';\nimport ContactList from './Contact-list/ContactList';\nimport { Filter } from './Filter/Filter';\nimport { Section } from './Section/Section';\nimport { SectionContainer } from './Phonebook.styled';\n\nfunction Phonebook() {\n  return (\n    <SectionContainer>\n      <Section title=\"Phonebook\">\n        <Form />\n      </Section>\n      <Section title=\"Contacts\">\n        <Filter/>\n        <ContactList/>\n      </Section>\n    </SectionContainer>\n  );\n}\n\nexport default Phonebook;\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { getContactsThunk } from 'redux/contactsAsyncThunk';\nimport Phonebook from 'components/Phonebook/Phonebook';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(getContactsThunk);\n  }, [dispatch]);\n\n  return <Phonebook />;\n};\n\nexport default ContactsPage;\n"],"names":["FormEl","styled","FormLable","FormInput","FormBtn","useState","name","setName","phone","setPhone","contacts","useSelector","selectContacts","dispatch","useDispatch","useEffect","getContactsThunk","handleChange","e","currentTarget","value","resetForm","onSubmit","data","preventDefault","number","find","contact","toLowerCase","alert","addContactsThunk","type","pattern","title","required","onChange","Notification","message","Contacts","Contact","ContactName","ContactBtnDelete","visibleContacts","selectVisibleContacts","length","map","onClick","id","deleteContactsThunk","FilterText","FilterInput","Filter","selectFilter","setFilter","SectionWrapper","Section","children","SectionContainer"],"sourceRoot":""}